generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  image         String?
  role          UserRole  @default(USER)
  email         String?   @unique
  emailVerified DateTime?
  bio           String?
  phone         String?
  location      String?

  accounts Account[]
  sessions Session[]
  posts    Post[]
  bookings Booking[]
  reviews  Review[]
  Comment  Comment[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@index([title])
}

model Comment {
  id        String    @id @default(cuid())
  body      String
  rating    Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model Lesson {
  id          String           @id @default(cuid())
  assignment  String?
  notes       String?
  description String?
  duration    Int?
  guitarType  GuitarType       @default(ACOUSTIC)
  proficiency ProficiencyLevel @default(BEGINNER)
  presence    LessonPresence   @default(ONLINE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?

  review  Review?
  booking Booking?
}

model Invoice {
  id        String        @id @default(cuid())
  url       String
  amount    Float
  currency  Currency
  status    InvoiceStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime?
}

model LessonTimeSlot {
  id        String    @id @default(cuid())
  start     DateTime
  end       DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Booking {
  id        String        @id @default(cuid())
  date      DateTime
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime?

  lesson     Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   String @unique
  bookedBy   User   @relation(fields: [bookedById], references: [id])
  bookedById String @unique
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String?
  createdAt DateTime @default(now())

  reviewedBy   User   @relation(fields: [reviewedById], references: [id])
  reviewedById String @unique
  lesson       Lesson @relation(fields: [lessonId], references: [id])
  lessonId     String @unique
}

enum UserRole {
  USER
  INSTRUCTOR
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum ProficiencyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonPresence {
  OFFLINE
  ONLINE
}

enum Currency {
  EUR
  USD
}

enum InvoiceStatus {
  PENDING
  COMPLETED
  FAILED
}

enum GuitarType {
  ACOUSTIC
  ELECTRICAL
  BASS
  SPECIALTY
  HYBRID
  OTHER
}
